import asyncio
import os
import logging
import sqlite3
import datetime
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üîë –¢–û–ö–ï–ù (–¥–æ–±–∞–≤—å –≤ Render Environment Variables)
BOT_TOKEN = os.getenv("BOT_TOKEN", "8407995258:AAE1I7paypCciMW4hBTdCjLhByGlwF35PNs")

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# ADMINS
ADMINS = [7450525550, 5946158486]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id BIGINT UNIQUE NOT NULL,
            full_name TEXT,
            birth_date DATE,
            is_admin BOOLEAN DEFAULT 0,
            joined_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            day_of_week INTEGER NOT NULL,
            lesson_number INTEGER NOT NULL,
            subject TEXT NOT NULL,
            classroom TEXT
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS homework (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            subject TEXT NOT NULL,
            description TEXT NOT NULL,
            due_date DATE NOT NULL,
            added_by BIGINT NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS attendance (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id BIGINT NOT NULL,
            date DATE NOT NULL,
            status TEXT NOT NULL DEFAULT 'present',
            reason TEXT,
            marked_by BIGINT NOT NULL,
            marked_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(user_id, date)
        )
    ''')
    
    conn.commit()
    conn.close()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    waiting_for_fio = State()

class AttendanceForm(StatesGroup):
    choosing_reason = State()

# –£—Ç–∏–ª–∏—Ç—ã
def get_user(user_id: int):
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT full_name, is_admin FROM users WHERE telegram_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result

def execute_query(query, params=(), fetch=False):
    conn = sqlite3.connect('school_bot.db')
    cursor = conn.cursor()
    cursor.execute(query, params)
    if fetch:
        result = cursor.fetchall() if "SELECT" in query.upper() else cursor.fetchone()
    else:
        result = cursor.rowcount
    conn.commit()
    conn.close()
    return result

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏—á–∏–Ω
reason_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ë–æ–ª–µ—é")],
        [KeyboardButton(text="–í –ø—Ä–æ–±–∫–µ / –î–¢–ü")],
        [KeyboardButton(text="–°–µ–º–µ–π–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞")],
        [KeyboardButton(text="–î—Ä—É–≥–æ–µ")],
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –•–µ–Ω–¥–ª–µ—Ä—ã
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    result = get_user(user_id)
    
    if result and result[0]:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {result[0]}! üëã\n\n"
            "/schedule ‚Äî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
            "/homework ‚Äî –î–ó\n"
            "/attendance ‚Äî –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å\n"
            "/support ‚Äî –ü–æ–º–æ—â—å"
        )
    else:
        execute_query(
            "INSERT OR IGNORE INTO users (telegram_id, full_name) VALUES (?, ?)",
            (user_id, None)
        )
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ **–§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é**")
        await state.set_state(Form.waiting_for_fio)

@dp.message(Form.waiting_for_fio)
async def process_fio(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    if len(fio) < 5:
        await message.answer("‚ùå –§–ò–û —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë:")
        return
    
    execute_query(
        "UPDATE users SET full_name = ? WHERE telegram_id = ?",
        (fio, message.from_user.id)
    )
    
    await message.answer(f"‚úÖ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: **{fio}**")
    await state.clear()

@dp.message(Command("support"))
async def cmd_support(message: types.Message):
    await message.answer(
        "üõ†Ô∏è **–ü–æ–º–æ—â—å**\n\n"
        "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º –ø–∏—à–∏ –º–Ω–µ: [@vvertazuu](https://t.me/vvertazuu)\n"
        "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –£—á—ë–±–æ–π –ø–∏—â–∏ –º–Ω–µ: [@lilalusc](https://t.me/lilalusc)",
        parse_mode="Markdown"
    )

@dp.message(Command("schedule"))
async def cmd_schedule(message: types.Message):
    raw = message.text.replace("/schedule", "", 1).strip()
    
    try:
        if raw:
            target_date = datetime.datetime.strptime(raw, "%d.%m.%Y").date()
        else:
            target_date = datetime.date.today()
    except ValueError:
        await message.answer("–§–æ—Ä–º–∞—Ç: /schedule 30.10.2025")
        return

    day_of_week = target_date.isoweekday()
    DAYS = {
        1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 2: "–í—Ç–æ—Ä–Ω–∏–∫", 3: "–°—Ä–µ–¥–∞", 4: "–ß–µ—Ç–≤–µ—Ä–≥",
        5: "–ü—è—Ç–Ω–∏—Ü–∞", 6: "–°—É–±–±–æ—Ç–∞", 7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    
    lessons = execute_query(
        "SELECT lesson_number, subject, classroom FROM schedule WHERE day_of_week = ? ORDER BY lesson_number",
        (day_of_week,), fetch=True
    )
    
    if not lessons:
        await message.answer(f"üìÖ –ù–∞ {DAYS[day_of_week].lower()} ({target_date:%d.%m.%Y}) ‚Äî –ø—É—Å—Ç–æ")
        return
    
    text = f"üìÖ **{DAYS[day_of_week]} ({target_date:%d.%m.%Y})**\n\n"
    for num, subject, room in lessons:
        room_str = f" (–∫–∞–±. {room})" if room else ""
        text += f"{num}. {subject}{room_str}\n"
    
    await message.answer(text, parse_mode="Markdown")

@dp.message(Command("announce"))
async def cmd_announce(message: types.Message):
    user = get_user(message.from_user.id)
    if not user or not user[1]:
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω")
        return

    text = message.text.replace("/announce", "", 1).strip()
    if not text:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /announce –¢–µ–∫—Å—Ç")
        return

    users = execute_query("SELECT telegram_id FROM users", fetch=True)
    sent = failed = 0
    for (tg_id,) in users:
        try:
            await bot.send_message(tg_id, f"**–û–±—ä—è–≤–ª–µ–Ω–∏–µ**\n\n{text}", parse_mode="Markdown")
            sent += 1
        except:
            failed += 1

    await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}, –æ—à–∏–±–æ–∫: {failed}")

ADMINS = [7450525550, 5946158486]

@dp.message(Command("make_admin"))
async def make_admin(message: types.Message):
    if message.from_user.id in ADMINS:
        conn = sqlite3.connect('school_bot.db')
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET is_admin = 1 WHERE telegram_id = ?", (message.from_user.id,))
        conn.commit()
        conn.close()
        await message.answer("‚úÖ –¢—ã —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω!")
    else:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")

@dp.message(Command("homework"))
async def cmd_homework(message: types.Message):
    today = datetime.date.today()
    hw_list = execute_query(
        "SELECT subject, description, due_date FROM homework WHERE due_date >= ? ORDER BY due_date",
        (today,), fetch=True
    )
    
    if not hw_list:
        await message.answer("üìö –ù–µ—Ç –î–ó")
        return
    
    text = "üìö **–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è**\n\n"
    for subject, desc, due in hw_list:
        text += f"üìå *{subject}* (–¥–æ {due})\n{desc}\n\n"
    
    await message.answer(text, parse_mode="Markdown")

@dp.message(Command("add_hw"))
async def cmd_add_hw(message: types.Message):
    user = get_user(message.from_user.id)
    if not user or not user[1]:
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω")
        return
    
    raw = message.text.replace("/add_hw", "", 1).strip()
    if ":" not in raw:
        await message.answer("/add_hw –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: –ó–∞–¥–∞—á–∏ 1-10 –¥–æ 01.11")
        return
    
    subject, rest = raw.split(":", 1)
    subject = subject.strip()
    rest = rest.strip()
    
    today = datetime.date.today()  # ‚Üê –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º today
    due_date = today + datetime.timedelta(days=2)  # ‚Üê –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é +2 –¥–Ω—è
    desc_part = rest

    if " –¥–æ " in rest:
        try:
            desc_part, date_part = rest.rsplit(" –¥–æ ", 1)
            date_part = date_part.strip()
            due_date = datetime.datetime.strptime(date_part, "%d.%m").date()
            
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
            if due_date < today:
                due_date = due_date.replace(year=today.year + 1)
            else:
                due_date = due_date.replace(year=today.year)
        except ValueError:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º +2 –¥–Ω—è
            desc_part = rest
            due_date = today + datetime.timedelta(days=2)
    else:
        desc_part = rest

    execute_query(
        "INSERT INTO homework (subject, description, due_date, added_by) VALUES (?, ?, ?, ?)",
        (subject, desc_part.strip(), due_date, message.from_user.id)
    )
    
    await message.answer(f"–î–ó –ø–æ **{subject}** –¥–æ {due_date:%d.%m}", parse_mode="Markdown")@dp.message(Command("add_hw"))
async def cmd_add_hw(message: types.Message):
    user = get_user(message.from_user.id)
    if not user or not user[1]:
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω")
        return
    
    raw = message.text.replace("/add_hw", "", 1).strip()
    if ":" not in raw:
        await message.answer("/add_hw –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: –ó–∞–¥–∞—á–∏ 1-10 –¥–æ 01.11")
        return
    
    subject, rest = raw.split(":", 1)
    subject = subject.strip()
    rest = rest.strip()
    
    today = datetime.date.today()  # ‚Üê –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º today
    due_date = today + datetime.timedelta(days=2)  # ‚Üê –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é +2 –¥–Ω—è
    desc_part = rest

    if " –¥–æ " in rest:
        try:
            desc_part, date_part = rest.rsplit(" –¥–æ ", 1)
            date_part = date_part.strip()
            due_date = datetime.datetime.strptime(date_part, "%d.%m").date()
            
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
            if due_date < today:
                due_date = due_date.replace(year=today.year + 1)
            else:
                due_date = due_date.replace(year=today.year)
        except ValueError:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º +2 –¥–Ω—è
            desc_part = rest
            due_date = today + datetime.timedelta(days=2)
    else:
        desc_part = rest

    execute_query(
        "INSERT INTO homework (subject, description, due_date, added_by) VALUES (?, ?, ?, ?)",
        (subject, desc_part.strip(), due_date, message.from_user.id)
    )
    
    await message.answer(f"–î–ó –ø–æ **{subject}** –¥–æ {due_date:%d.%m}", parse_mode="Markdown")

@dp.message(Command("add_schedule"))
async def cmd_add_schedule(message: types.Message):
    if not get_user(message.from_user.id)[1]:
        await message.answer("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω")
        return
    
    raw = message.text.replace("/add_schedule", "", 1).strip()
    if ":" not in raw:
        await message.answer("/add_schedule 30.10.2025: 1. –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (304), 2. –§–∏–∑–∏–∫–∞")
        return
    
    date_part, lessons_part = raw.split(":", 1)
    date_part = date_part.strip()
    
    try:
        if len(date_part) == 10:
            date_obj = datetime.datetime.strptime(date_part, "%d.%m.%Y").date()
        else:
            raise ValueError
    except:
        await message.answer("–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: 30.10.2025")
        return
    
    day_of_week = date_obj.isoweekday()
    
    execute_query("DELETE FROM schedule WHERE day_of_week = ?", (day_of_week,))
    
    for lesson in lessons_part.split(","):
        lesson = lesson.strip()
        if "." not in lesson:
            continue
        try:
            num_part, rest = lesson.split(".", 1)
            lesson_num = int(num_part.strip())
            if "(" in rest and ")":
                subject = rest.split("(")[0].strip()
                classroom = rest.split("(")[1].split(")")[0].strip()
            else:
                subject, classroom = rest.strip(), ""
            
            execute_query(
                "INSERT INTO schedule VALUES (NULL, ?, ?, ?, ?)",
                (day_of_week, lesson_num, subject, classroom)
            )
        except:
            continue
    
    await message.answer(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date_obj:%d.%m.%Y} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")

@dp.message(Command("attendance"))
async def cmd_attendance(message: types.Message):
    today = datetime.date.today()
    month_ago = today - datetime.timedelta(days=30)
    
    total_rows = execute_query(
        "SELECT COUNT(*) FROM attendance WHERE user_id = ? AND date BETWEEN ? AND ?",
        (message.from_user.id, month_ago, today), fetch=True
    )
    total = total_rows[0][0] if total_rows else 0

    present_rows = execute_query(
        "SELECT COUNT(*) FROM attendance WHERE user_id = ? AND date BETWEEN ? AND ? AND status = 'present'",
        (message.from_user.id, month_ago, today), fetch=True
    )
    present = present_rows[0][0] if present_rows else 0
    
    percentage = round((present / total * 100) if total > 0 else 0, 1)
    
    await message.answer(
        f"**–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å (30 –¥–Ω–µ–π)**\n\n"
        f"–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª: {present}/{total}\n"
        f"**{percentage}%**\n\n"
        "–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É: 30.10.2025",
        parse_mode="Markdown"
    )

@dp.message(F.text.regexp(r'\d{2}\.\d{2}\.\d{4}'))
async def handle_date(message: types.Message):
    try:
        date = datetime.datetime.strptime(message.text, "%d.%m.%Y").date()
        result = execute_query(
            "SELECT status, reason FROM attendance WHERE user_id = ? AND date = ?",
            (message.from_user.id, date), fetch=True
        )
        
        if not result:
            await message.answer(f"‚ùå {date:%d.%m.%Y}: –ù–µ—Ç –æ—Ç–º–µ—Ç–∫–∏")
            return
        
        status, reason = result[0]
        if status == "present":
            await message.answer(f"‚úÖ {date:%d.%m.%Y}: –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª")
        elif status == "absent":
            reason_text = f"\n–ü—Ä–∏—á–∏–Ω–∞: {reason}" if reason else ""
            await message.answer(f"‚ùå {date:%d.%m.%Y}: –û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª{reason_text}")
        else:
            await message.answer(f"üïí {date:%d.%m.%Y}: –û–ø–æ–∑–¥–∞–ª")
    except:
        pass

# === –î–ï–ù–¨ –†–û–ñ–î–ï–ù–ò–Ø: –£–°–¢–ê–ù–û–í–ö–ê (–¢–û–õ–¨–ö–û –ê–î–ú–ò–ù) ===
@dp.message(Command("birthday"))
async def cmd_birthday(message: types.Message):
    user = get_user(message.from_user.id)
    if not user or not user[1]:
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è")
        return

    raw = message.text.replace("/birthday", "", 1).strip()
    if not raw:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/birthday –§–ò–û –î–î.–ú–ú\n–ü—Ä–∏–º–µ—Ä: /birthday –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω 15.05")
        return

    parts = raw.split()
    if len(parts) < 2:
        await message.answer("–£–∫–∞–∂–∏ –§–ò–û –∏ –¥–∞—Ç—É: /birthday –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω 15.05")
        return

    date_str = parts[-1]
    name = " ".join(parts[:-1])

    try:
        birth_date = datetime.datetime.strptime(date_str, "%d.%m").date()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–¥ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π, —Ç–æ–ª—å–∫–æ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü
        birth_date = birth_date.replace(year=datetime.date.today().year)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π: –î–î.–ú–ú")
        return

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –§–ò–û (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
    matches = execute_query(
        "SELECT telegram_id FROM users WHERE full_name LIKE ?",
        (f"%{name}%",), fetch=True
    )

    if not matches:
        await message.answer(f"–°—Ç—É–¥–µ–Ω—Ç '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    if len(matches) > 1:
        names = "\n".join([f"‚Ä¢ {row[1]}" for row in execute_query(
            "SELECT full_name FROM users WHERE full_name LIKE ?", (f"%{name}%",), fetch=True
        )])
        await message.answer(f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ:\n{names}\n\n–£—Ç–æ—á–Ω–∏ –§–ò–û")
        return

    user_id = matches[0][0]
    execute_query(
        "UPDATE users SET birth_date = ? WHERE telegram_id = ?",
        (birth_date, user_id)
    )
    await message.answer(f"–î–† –¥–ª—è **{name}** —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: **{date_str}**", parse_mode="Markdown")


# === –°–ü–ò–°–û–ö –°–¢–£–î–ï–ù–¢–û–í –° –î–† (–¢–û–õ–¨–ö–û –ê–î–ú–ò–ù) ===
@dp.message(Command("birthdays"))
async def cmd_birthdays_list(message: types.Message):
    user = get_user(message.from_user.id)
    if not user or not user[1]:
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω")
        return

    students = execute_query(
        "SELECT full_name, birth_date, telegram_id FROM users WHERE full_name IS NOT NULL ORDER BY full_name",
        fetch=True
    )

    if not students:
        await message.answer("–ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ")
        return

    text = "**–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –î–†**\n\n"
    for name, bdate, tg_id in students:
        bdate_str = bdate.strftime("%d.%m") if bdate else "–Ω–µ —É–∫–∞–∑–∞–Ω"
        text += f"‚Ä¢ {name} (`{tg_id}`) ‚Äî {bdate_str}\n"

    await message.answer(text, parse_mode="Markdown")


# === –°–ü–ò–°–û–ö –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (–¢–û–õ–¨–ö–û –ê–î–ú–ò–ù) ===
@dp.message(Command("users"))
async def cmd_users(message: types.Message):
    user = get_user(message.from_user.id)
    if not user or not user[1]:
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω")
        return

    all_users = execute_query(
        "SELECT full_name, telegram_id, joined_at, is_admin FROM users ORDER BY joined_at",
        fetch=True
    )

    if not all_users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç")
        return

    text = "**–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**\n\n"
    for name, tg_id, joined, is_admin in all_users:
        name = name or "–§–ò–û –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        admin_mark = " (–∞–¥–º–∏–Ω)" if is_admin else ""
        joined_str = joined[:10] if joined else "?"
        text += f"‚Ä¢ {name}{admin_mark} ‚Äî `{tg_id}` ‚Äî {joined_str}\n"

    # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ ‚Äî —Ä–∞–∑–æ–±—å—ë–º
    if len(text) > 3900:
        parts = [text[i:i+3900] for i in range(0, len(text), 3900)]
        for part in parts:
            await message.answer(part, parse_mode="Markdown")
    else:
        await message.answer(text, parse_mode="Markdown")

@dp.message(Command("reason"))
async def cmd_reason(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–∏—á–∏–Ω—É:", reply_markup=reason_keyboard)
    await state.set_state(AttendanceForm.choosing_reason)

@dp.message(AttendanceForm.choosing_reason)
async def process_reason(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return
    
    today = datetime.date.today()
    execute_query(
        "INSERT OR REPLACE INTO attendance (user_id, date, status, reason, marked_by) VALUES (?, ?, ?, ?, ?)",
        (message.from_user.id, today, 'absent', message.text, message.from_user.id)
    )
    
    await message.answer(f"‚úÖ –ü—Ä–∏—á–∏–Ω–∞: **{message.text}**", reply_markup=ReplyKeyboardRemove())
    await state.clear()

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã (announce, mark, students, reasons, birthday, make_admin)
# ... (–¥–æ–±–∞–≤—å –∏—Ö –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ. –Ø —Å–æ–∫—Ä–∞—Ç–∏–ª –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)

async def birthday_task():
    while True:
        now = datetime.datetime.now()
        next_run = (now + datetime.timedelta(days=1)).replace(hour=9, minute=0, second=0, microsecond=0)
        await asyncio.sleep((next_run - now).total_seconds())

        today = datetime.date.today()
        today_str = today.strftime("%m-%d")

        birthdays = execute_query(
            "SELECT telegram_id, full_name FROM users WHERE strftime('%m-%d', birth_date) = ? AND birth_date IS NOT NULL",
            (today_str,), fetch=True
        )

        for tg_id, name in birthdays:
            try:
                await bot.send_message(
                    tg_id,
                    f"**–° –î–ù–Å–ú –†–û–ñ–î–ï–ù–ò–Ø, {name}!**\n\n"
                    f"–ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç –ø–æ–ª–æ–Ω —Ä–∞–¥–æ—Å—Ç–∏, —É–ª—ã–±–æ–∫ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!\n"
                    f"–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤ –≤ —É—á—ë–±–µ –∏ –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ!",
                    parse_mode="Markdown"
                )
                logger.info(f"–ü–æ–∑–¥—Ä–∞–≤–∏–ª {name} ({tg_id}) —Å –î–†")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å {tg_id}: {e}")

# –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø RENDER
async def health_check(request):
    return web.Response(text="OK")

async def web_server():
    app = web.Application()
    app.router.add_get("/", health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.environ.get("PORT", 10000)))
    await site.start()
    logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")

async def run_bot():
    init_db()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

async def main():
    await asyncio.gather(
        web_server(),    # ‚Üê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
        run_bot()        # ‚Üê Telegram –±–æ—Ç
    )
